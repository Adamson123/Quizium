//get proile image (might not be needed anymore)
export const getProfileImg = async (req, res) => {
    const { userId } = req;
    let file = await gfs.files.findOne({ filename: userId });
    //if user profile image related to the user was not found switch to default user profile image
    if (!file) {
        file = await gfs.files.findOne({ filename: "newUser" });
    }

    const readStream = gridfsBucket.openDownloadStream(file._id);
    readStream.pipe(res);
};


//router.get("/image", getProfileImg);
router.post("/upload-prof", upload.single("file"), async (req, res) => {
    const { buffer, mimetype } = req.file;

    await ProfImagesModel.create({
        // profId: userId,
        image: {
            data: buffer,
            contentType: mimetype,
        },
    });

    res.json({ msg: "uploaded To Profile Images collection" });
});
router.patch("/personal", upload.single("file"), updatePersonalInfo);

router.patch("/password", updatePassword);


router.post("/uploadImage", upload.single("file"), async (req, res) => {
    try {
        const { originalname, buffer, mimetype } = req.file;

      

        const image = await QuizImagesModel.create({
            image: {
                data: buffer,
                contentType: mimetype,
            },
        });

        res.status(201).json({
            msg: "image uploaded successfully " + originalname + " " + mimetype,
        });
    } catch (error) {
        console.log("error uploading", error.message);
        throw CustomError("error uploading", error.message, 400);
    }
});
